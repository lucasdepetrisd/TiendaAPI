// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaAPI.Data;

#nullable disable

namespace TiendaAPI.Migrations
{
    [DbContext(typeof(TiendaContext))]
    [Migration("20240211052745_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TiendaAPI.Models.Articulo", b =>
                {
                    b.Property<int>("IdArticulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArticulo"));

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdCategoriaNavigationIdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.Property<int>("IdMarcaNavigationIdMarca")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoTalle")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoTalleNavigationIdTipoTalle")
                        .HasColumnType("int");

                    b.Property<int>("Iva")
                        .HasColumnType("int");

                    b.Property<int>("MargenGanancia")
                        .HasColumnType("int");

                    b.HasKey("IdArticulo");

                    b.HasIndex("IdCategoriaNavigationIdCategoria");

                    b.HasIndex("IdMarcaNavigationIdMarca");

                    b.HasIndex("IdTipoTalleNavigationIdTipoTalle");

                    b.ToTable("Articulo", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categoria", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cuil")
                        .HasColumnType("int");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCondicionTributaria")
                        .HasColumnType("int");

                    b.Property<int>("IdCondicionTributariaNavigationIdCondicionTributaria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdCondicionTributariaNavigationIdCondicionTributaria");

                    b.ToTable("Cliente", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Color", b =>
                {
                    b.Property<int>("IdColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdColor"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdColor");

                    b.ToTable("Color", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Comprobante", b =>
                {
                    b.Property<int>("IdComprobante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComprobante"));

                    b.Property<int>("IdVenta")
                        .HasColumnType("int");

                    b.Property<int>("IdVentaNavigationIdVenta")
                        .HasColumnType("int");

                    b.HasKey("IdComprobante");

                    b.HasIndex("IdVentaNavigationIdVenta");

                    b.ToTable("Comprobante", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.CondicionTributaria", b =>
                {
                    b.Property<int>("IdCondicionTributaria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCondicionTributaria"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCondicionTributaria");

                    b.ToTable("CondicionTributaria", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpleado"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursalNavigationIdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("LegajoEmpleado")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmpleado");

                    b.HasIndex("IdSucursalNavigationIdSucursal");

                    b.ToTable("Empleado", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Inventario", b =>
                {
                    b.Property<int>("IdInventarioArticulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInventarioArticulo"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<int>("CodigoNavigationIdArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdColor")
                        .HasColumnType("int");

                    b.Property<int>("IdColorNavigationIdColor")
                        .HasColumnType("int");

                    b.Property<int>("IdMedida")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursalNavigationIdSucursal")
                        .HasColumnType("int");

                    b.Property<int?>("IdTalleNavigationIdTalle")
                        .HasColumnType("int");

                    b.HasKey("IdInventarioArticulo");

                    b.HasIndex("CodigoNavigationIdArticulo");

                    b.HasIndex("IdColorNavigationIdColor");

                    b.HasIndex("IdSucursalNavigationIdSucursal");

                    b.HasIndex("IdTalleNavigationIdTalle");

                    b.ToTable("Inventario", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.LineaDeVenta", b =>
                {
                    b.Property<int>("IdLineaDeVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLineaDeVenta"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdInventarioArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdInventarioArticuloNavigationIdInventarioArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdVenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdVentaNavigationIdVenta")
                        .HasColumnType("int");

                    b.Property<int>("MontoIva")
                        .HasColumnType("int");

                    b.Property<int>("NetoGravado")
                        .HasColumnType("int");

                    b.Property<int>("PorcentajeIva")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdLineaDeVenta");

                    b.HasIndex("IdInventarioArticuloNavigationIdInventarioArticulo");

                    b.HasIndex("IdVentaNavigationIdVenta");

                    b.ToTable("LineaDeVenta", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMarca"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMarca");

                    b.ToTable("Marca", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPago"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdVenta")
                        .HasColumnType("int");

                    b.Property<int>("IdVentaNavigationIdVenta")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ticket")
                        .HasColumnType("int");

                    b.HasKey("IdPago");

                    b.HasIndex("IdVentaNavigationIdVenta");

                    b.ToTable("Pago", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.PuntoDeVenta", b =>
                {
                    b.Property<int>("IdPuntoDeVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPuntoDeVenta"));

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursalNavigationIdSucursal")
                        .HasColumnType("int");

                    b.Property<int>("NumeroPtoVenta")
                        .HasColumnType("int");

                    b.HasKey("IdPuntoDeVenta");

                    b.HasIndex("IdSucursalNavigationIdSucursal");

                    b.ToTable("PuntoDeVenta", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRol");

                    b.ToTable("Rol", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Sucursal", b =>
                {
                    b.Property<int>("IdSucursal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSucursal"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cuit")
                        .HasColumnType("int");

                    b.Property<int>("CuitNavigationIdTienda")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdSucursal");

                    b.HasIndex("CuitNavigationIdTienda");

                    b.ToTable("Sucursal", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Talle", b =>
                {
                    b.Property<int>("IdTalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTalle"));

                    b.Property<int>("IdTipoTalle")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoTalleNavigationIdTipoTalle")
                        .HasColumnType("int");

                    b.Property<string>("Medida")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTalle");

                    b.HasIndex("IdTipoTalleNavigationIdTipoTalle");

                    b.ToTable("Talle", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Tienda", b =>
                {
                    b.Property<int>("IdTienda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTienda"));

                    b.Property<int>("Cuit")
                        .HasColumnType("int");

                    b.Property<int>("IdCondicionTributaria")
                        .HasColumnType("int");

                    b.Property<int>("IdCondicionTributariaNavigationIdCondicionTributaria")
                        .HasColumnType("int");

                    b.HasKey("IdTienda");

                    b.HasIndex("IdCondicionTributariaNavigationIdCondicionTributaria");

                    b.ToTable("Tienda", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.TipoDeComprobante", b =>
                {
                    b.Property<int>("IdTipoDeComprobante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoDeComprobante"));

                    b.Property<int>("IdCondicionTributaria")
                        .HasColumnType("int");

                    b.Property<int>("IdCondicionTributariaNavigationIdCondicionTributaria")
                        .HasColumnType("int");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoDeComprobante");

                    b.HasIndex("IdCondicionTributariaNavigationIdCondicionTributaria");

                    b.ToTable("TipoDeComprobante", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.TipoTalle", b =>
                {
                    b.Property<int>("IdTipoTalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoTalle"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoTalle");

                    b.ToTable("TipoTalle", "Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int>("IdRolNavigationIdRol")
                        .HasColumnType("int");

                    b.Property<int>("LegajoEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("LegajoEmpleadoNavigationIdEmpleado")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdRolNavigationIdRol");

                    b.HasIndex("LegajoEmpleadoNavigationIdEmpleado");

                    b.ToTable("Usuario", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Venta", b =>
                {
                    b.Property<int>("IdVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVenta"));

                    b.Property<int>("DniCliente")
                        .HasColumnType("int");

                    b.Property<int>("DniClienteNavigationIdCliente")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdEmpleadoNavigationIdEmpleado")
                        .HasColumnType("int");

                    b.Property<int?>("IdPuntoDeVentaNavigationIdPuntoDeVenta")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDeComprobante")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoDeComprobanteNavigationIdTipoDeComprobante")
                        .HasColumnType("int");

                    b.Property<int>("LegajoEmpleado")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumeroPtoVenta")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVenta");

                    b.HasIndex("DniClienteNavigationIdCliente");

                    b.HasIndex("IdEmpleadoNavigationIdEmpleado");

                    b.HasIndex("IdPuntoDeVentaNavigationIdPuntoDeVenta");

                    b.HasIndex("IdTipoDeComprobanteNavigationIdTipoDeComprobante");

                    b.ToTable("Venta", "Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Articulo", b =>
                {
                    b.HasOne("TiendaAPI.Models.Categoria", "IdCategoriaNavigation")
                        .WithMany("Articulo")
                        .HasForeignKey("IdCategoriaNavigationIdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Marca", "IdMarcaNavigation")
                        .WithMany("Articulo")
                        .HasForeignKey("IdMarcaNavigationIdMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.TipoTalle", "IdTipoTalleNavigation")
                        .WithMany("Articulo")
                        .HasForeignKey("IdTipoTalleNavigationIdTipoTalle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdMarcaNavigation");

                    b.Navigation("IdTipoTalleNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Cliente", b =>
                {
                    b.HasOne("TiendaAPI.Models.CondicionTributaria", "IdCondicionTributariaNavigation")
                        .WithMany("Cliente")
                        .HasForeignKey("IdCondicionTributariaNavigationIdCondicionTributaria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCondicionTributariaNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Comprobante", b =>
                {
                    b.HasOne("TiendaAPI.Models.Venta", "IdVentaNavigation")
                        .WithMany("Comprobante")
                        .HasForeignKey("IdVentaNavigationIdVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Empleado", b =>
                {
                    b.HasOne("TiendaAPI.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany("Empleado")
                        .HasForeignKey("IdSucursalNavigationIdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSucursalNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Inventario", b =>
                {
                    b.HasOne("TiendaAPI.Models.Articulo", "CodigoNavigation")
                        .WithMany("Inventario")
                        .HasForeignKey("CodigoNavigationIdArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Color", "IdColorNavigation")
                        .WithMany("Inventario")
                        .HasForeignKey("IdColorNavigationIdColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany("Inventario")
                        .HasForeignKey("IdSucursalNavigationIdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Talle", "IdTalleNavigation")
                        .WithMany("Inventario")
                        .HasForeignKey("IdTalleNavigationIdTalle");

                    b.Navigation("CodigoNavigation");

                    b.Navigation("IdColorNavigation");

                    b.Navigation("IdSucursalNavigation");

                    b.Navigation("IdTalleNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.LineaDeVenta", b =>
                {
                    b.HasOne("TiendaAPI.Models.Inventario", "IdInventarioArticuloNavigation")
                        .WithMany("LineaDeVenta")
                        .HasForeignKey("IdInventarioArticuloNavigationIdInventarioArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Venta", "IdVentaNavigation")
                        .WithMany("LineaDeVenta")
                        .HasForeignKey("IdVentaNavigationIdVenta");

                    b.Navigation("IdInventarioArticuloNavigation");

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Pago", b =>
                {
                    b.HasOne("TiendaAPI.Models.Venta", "IdVentaNavigation")
                        .WithMany()
                        .HasForeignKey("IdVentaNavigationIdVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.PuntoDeVenta", b =>
                {
                    b.HasOne("TiendaAPI.Models.Sucursal", "IdSucursalNavigation")
                        .WithMany("PuntoDeVenta")
                        .HasForeignKey("IdSucursalNavigationIdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSucursalNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Sucursal", b =>
                {
                    b.HasOne("TiendaAPI.Models.Tienda", "CuitNavigation")
                        .WithMany("Sucursal")
                        .HasForeignKey("CuitNavigationIdTienda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuitNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Talle", b =>
                {
                    b.HasOne("TiendaAPI.Models.TipoTalle", "IdTipoTalleNavigation")
                        .WithMany("Talle")
                        .HasForeignKey("IdTipoTalleNavigationIdTipoTalle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdTipoTalleNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Tienda", b =>
                {
                    b.HasOne("TiendaAPI.Models.CondicionTributaria", "IdCondicionTributariaNavigation")
                        .WithMany("Tienda")
                        .HasForeignKey("IdCondicionTributariaNavigationIdCondicionTributaria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCondicionTributariaNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.TipoDeComprobante", b =>
                {
                    b.HasOne("TiendaAPI.Models.CondicionTributaria", "IdCondicionTributariaNavigation")
                        .WithMany("TipoDeComprobante")
                        .HasForeignKey("IdCondicionTributariaNavigationIdCondicionTributaria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCondicionTributariaNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Usuario", b =>
                {
                    b.HasOne("TiendaAPI.Models.Rol", "IdRolNavigation")
                        .WithMany("Usuario")
                        .HasForeignKey("IdRolNavigationIdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Empleado", "LegajoEmpleadoNavigation")
                        .WithMany("UsuarioNavigation")
                        .HasForeignKey("LegajoEmpleadoNavigationIdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdRolNavigation");

                    b.Navigation("LegajoEmpleadoNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Venta", b =>
                {
                    b.HasOne("TiendaAPI.Models.Cliente", "DniClienteNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("DniClienteNavigationIdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaAPI.Models.Empleado", "IdEmpleadoNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdEmpleadoNavigationIdEmpleado");

                    b.HasOne("TiendaAPI.Models.PuntoDeVenta", "IdPuntoDeVentaNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdPuntoDeVentaNavigationIdPuntoDeVenta");

                    b.HasOne("TiendaAPI.Models.TipoDeComprobante", "IdTipoDeComprobanteNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdTipoDeComprobanteNavigationIdTipoDeComprobante");

                    b.Navigation("DniClienteNavigation");

                    b.Navigation("IdEmpleadoNavigation");

                    b.Navigation("IdPuntoDeVentaNavigation");

                    b.Navigation("IdTipoDeComprobanteNavigation");
                });

            modelBuilder.Entity("TiendaAPI.Models.Articulo", b =>
                {
                    b.Navigation("Inventario");
                });

            modelBuilder.Entity("TiendaAPI.Models.Categoria", b =>
                {
                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.Cliente", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Color", b =>
                {
                    b.Navigation("Inventario");
                });

            modelBuilder.Entity("TiendaAPI.Models.CondicionTributaria", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Tienda");

                    b.Navigation("TipoDeComprobante");
                });

            modelBuilder.Entity("TiendaAPI.Models.Empleado", b =>
                {
                    b.Navigation("UsuarioNavigation");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Inventario", b =>
                {
                    b.Navigation("LineaDeVenta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Marca", b =>
                {
                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("TiendaAPI.Models.PuntoDeVenta", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Rol", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaAPI.Models.Sucursal", b =>
                {
                    b.Navigation("Empleado");

                    b.Navigation("Inventario");

                    b.Navigation("PuntoDeVenta");
                });

            modelBuilder.Entity("TiendaAPI.Models.Talle", b =>
                {
                    b.Navigation("Inventario");
                });

            modelBuilder.Entity("TiendaAPI.Models.Tienda", b =>
                {
                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("TiendaAPI.Models.TipoDeComprobante", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("TiendaAPI.Models.TipoTalle", b =>
                {
                    b.Navigation("Articulo");

                    b.Navigation("Talle");
                });

            modelBuilder.Entity("TiendaAPI.Models.Venta", b =>
                {
                    b.Navigation("Comprobante");

                    b.Navigation("LineaDeVenta");
                });
#pragma warning restore 612, 618
        }
    }
}
